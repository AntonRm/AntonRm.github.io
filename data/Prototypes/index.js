// Prototypes
//================================================

/*	Цепочка прототипов:
	Пусть у нескольких объектов есть одинаковая функция,
	вынесем эту функцию в отдельный общий для остальных объект
	и назовем его прототипом.

	Допустим, когда JS-движок пытается найти какое-то свойство,
	то в первую очередь он будет искать его в самом объете,
	если свойства нет, JS будет проверять есть ли у объкта прототип,
	и если есть, то повторять процедуру поиска в нем. Но поскольку
	сам прототип является обычным объектом, то у него может быть свой
	собственный прототип. Таким образом поиск может продолжаться,
	пока мы не найдем объект, у которого нет прототипа. И если свойства,
	которое мы ищем, нет и там, то вернется undefined.
*/

const dog = {
	name: 'dog',
	voice: 'woof',
	say: function () {
		console.log(this.name, 'goes', this.voice)
	}
}

const cat = {
	name: 'cat',
	voice: 'meow',
	say: function () {
		console.log(this.name, 'goes', this.voice)
	}
}

dog.say()
cat.say()

// Вынесем функцию say() в отдельный объект:

const animal = {
	say: function () {
		console.log(this.name, 'goes', this.voice)
	}
}

const dog1 = {
	name: 'dog',
	voice: 'woof',
}

const cat1 = {
	name: 'cat',
	voice: 'meow',
}

// Теперь нужно установить связь с этим объектом:

// 1-й способ:
// Object.setPrototypeOf() - изменяет прототип объекта,
// не рекомендуется использовать, ломает оптимизацию движка

Object.setPrototypeOf(dog1, animal)
Object.setPrototypeOf(cat1, animal)

// 2-й способ:
// Object.create() - создает новый пустой объект
// с заданным прототипом

const dog2 = Object.create(animal)
dog2.name = 'dog'
dog2.voice = 'woof'

// Теперь вынесем логику создания нового объекта и установки
// прототипной связи в отдельную функцию:

function createAnimal(name, voice) {
	const result = Object.create(animal)
	result.name = name
	result.voice = voice
	return result
}

const dog3 = createAnimal('dog', 'woof')
const cat3 = createAnimal('cat', 'meow')

dog3.say()
cat3.say()

// 3-й способ:
// ключевое слово new.

// Фактически мы создали функцию-конструктор для создания новых
// объектов с заданным прототипом. Но в языке уже есть ключевое
// слово new, которое позволяет упростить эот код.

// Когда мы начинаем использовать эту функцию с ключевым словом new,
// JS оптимизирует для нас несколько моментов:

// 1. Не нужно больше вручную создавать новый пустой объект, он
//    будет создан автоматически.
// 2. Новый объект внутри функции будет называться this.
// 3. Не нужно возвращать новый объект, при вызове с new
//    возвращается автоматически.

function Animal(name, voice) {
	this.name = name
	this.voice = voice
}

const dog4 = new Animal('dog', 'woof')
const cat4 = new Animal('cat', 'meow')

// Осталось указать прототип для новых объектов.
// В JS у каждой функции (кроме стрелочных) есть свойство prototype -
// это просто пустой обеъкт, который будет использоваться как
// прототип для новых объектов, которые мы создаем с этой функцией.
// Добавим в него метод say():

Animal.prototype.say = function () {
	console.log(this.name, 'goes', this.voice)
}